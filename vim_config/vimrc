" Pre-setup
set nocompatible
filetype off

" Set runtime path to include Vundle and initialize
set rtp+=~/.vim/bundle/Vundle.vim
call vundle#begin()

" Vundle installation - https://github.com/VundleVim/Vundle.vim
Plugin 'VundleVim/Vundle.vim'

" Install plugins
Plugin 'scrooloose/syntastic'
Plugin 'scrooloose/nerdtree'
Plugin 'scrooloose/nerdcommenter'
Plugin 'vim-airline/vim-airline'
Plugin 'Raimondi/delimitMate'
Plugin 'ctrlpvim/ctrlp.vim'
Plugin 'tmhedberg/SimpylFold'

" Documentation
Plugin 'rizzatti/dash.vim'

" Tmux Plugin
Plugin 'christoomey/vim-tmux-navigator'

" Auto-completion, snippet engine and snippets
Plugin 'ervandew/supertab'
Plugin 'Valloric/YouCompleteMe'
Plugin 'ternjs/tern_for_vim'
Plugin 'SirVer/ultisnips'
Plugin 'honza/vim-snippets'

" Color Scheme Plugins
Plugin 'morhetz/gruvbox'
Plugin 'elzr/vim-json'

" Javascript Plugins
Plugin 'jelera/vim-javascript-syntax'
Plugin 'pangloss/vim-javascript'
Plugin 'nathanaelkane/vim-indent-guides'
Plugin 'maksimr/vim-jsbeautify'

" JSX Plugins
Plugin 'mxw/vim-jsx'

" Rust Plugins
Plugin 'rust-lang/rust.vim'
" Install racer separately
" > cargo install racer
Plugin 'racer-rust/vim-racer'

" Go Plugins
" Plugin 'fatih/vim-go'

" Python Plugins
" PEP8 checker
Plugin 'nvie/vim-flake8'
Plugin 'vim-scripts/indentpython.vim'

" Git Plugins
Plugin 'tpope/vim-fugitive'
Plugin 'tpope/vim-surround'

" Vundle - Plugin installation end
call vundle#end()

" Change leader to comma
let mapleader=","

" Generic settings
filetype plugin indent on
set number
set cursorline
set clipboard=unnamed
set encoding=utf-8
set nowrap
set hlsearch
set ignorecase
set smartcase
set nowritebackup
set nobackup
set noswapfile
set inccommand=split

" Quick ESC
inoremap jk <esc>

" Save file
noremap <leader>, :update<cr>

" Tab + file settings
set tabstop=4
set softtabstop=4
set shiftwidth=4
set textwidth=79
set expandtab
set autoindent

" Other file type specific settings
au BufNewFile,BufRead *.py
    \ set fileformat=unix
" Flag unnecessary whitespace
highlight BadWhitespace ctermbg=red guibg=red
au BufRead,BufNewFile *.py,*.pyw,*.c,*.h match BadWhitespace /\s\+$/

" Limit syntax highlighting for long lines, avoid performance issues
set synmaxcol=128 
if !has('nvim')
    set ttyscroll=10
endif

" Other NeoVim Settings
let g:python_host_prog = '/usr/local/bin/python'
let g:python3_host_prog = '/usr/local/bin/python3'

" Syntax highlighting
colorscheme gruvbox
set background=dark
set t_Co=256
syntax enable
" Make python code pretty
let python_highlight_all=1
syntax on

" Split config and navigation
set splitbelow
set splitright
nnoremap <c-j> <c-w>j
nnoremap <c-k> <c-w>k
nnoremap <c-h> <c-w>h
nnoremap <c-l> <c-w>l

" Enable code folding
set foldmethod=indent   
set foldlevel=99
set foldnestmax=10
set nofoldenable

" Space to toggle folds.
nnoremap <space> za

" Easier buffer management
noremap <leader>n :bn<cr>
noremap <leader>b :bp<cr>
noremap <leader>q :bp\|bd #<cr>

" NERDTree settings
map <c-n> :NERDTreeToggle<cr> 
let NERDTreeShowHidden = 1
let g:NERDTreeWinSize = 31
" expand to the path of the file in the current buffer
nmap <silent> <leader>y :NERDTreeFind<cr>
" ignore files in NERDTree
let NERDTreeIgnore=['\.DS_Store', '\~$']

" Tab between windows
noremap <tab> <c-w><c-w>

" Delete without yanking
nnoremap <leader>d "_d
vnoremap <leader>d "_d

" Replace currently selected text with default register
" without yanking it
vnoremap <leader>p "_dP

" Disable auto-commenting except for /*...*/
inoremap <expr> <enter> getline('.') =~ '^\s*//' ? '<enter><esc>S' : '<enter>'
nnoremap <expr> O getline('.') =~ '^\s*//' ? 'O<esc>S' : 'O'
nnoremap <expr> o getline('.') =~ '^\s*//' ? 'o<esc>S' : 'o'

" Ctrlp settings
nmap <leader>rr :CtrlP<cr>
nmap <leader>r :CtrlPBuffer<cr>
let g:ctrlp_map = '<leader>t'
let g:ctrlp_dotfiles = 1
let g:ctrlp_working_path_mode = 'ra'
" The 'find' user command ensures that files are listed in MacOSX/Linux
let g:ctrlp_user_command = ['.git', 'cd %s && git ls-files -co --exclude-standard', 'find %s -type f']
let g:ctrlp_custom_ignore = 'node_modules\|DS_Store\|git'

" Enable tern shortcuts and hints
let g:tern_map_keys = 1
let g:tern_show_argument_hints = 'on_hold'

" YouCompleteMe and UltiSnips settings
let g:SuperTabDefaultCompletionType    = '<c-n>'
let g:SuperTabCrMapping                = 0
let g:UltiSnipsExpandTrigger           = '<tab>'
let g:UltiSnipsJumpForwardTrigger      = '<tab>'
let g:UltiSnipsJumpBackwardTrigger     = '<s-tab>'
let g:UltiSnipsEditSplit               = "vertical"
" YCM Python 3.x interpreter
let g:ycm_server_python_interpreter    = '/usr/local/bin/python3'
let g:ycm_key_list_select_completion   = ['<c-j>', '<c-n>', '<down>']
let g:ycm_key_list_previous_completion = ['<c-k>', '<c-p>', '<up>']
let g:ycm_autoclose_preview_window_after_completion = 1
let g:ycm_confirm_extra_conf = 0
nnoremap <leader>jd :YcmCompleter GoTo<cr>
map <leader>g :YcmCompleter GoToDefinitionElseDeclaration<cr>

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" This section is required to ensure that YCM can 
" find virtualenvs that were created by Pipenv.
"
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

" Point YCM to the Pipenv created virtualenv, if possible
" At first, get the output of 'pipenv --venv' command.
let pipenv_venv_path = system('pipenv --venv')
" The above system() call produces a non zero exit code whenever
" a proper virtual environment has not been found.
" So, second, we only point YCM to the virtual environment when
" the call to 'pipenv --venv' was successful.
" Remember, that 'pipenv --venv' only points to the root directory
" of the virtual environment, so we have to append a full path to
" the python executable.
if shell_error == 0
  let venv_path = substitute(pipenv_venv_path, '\n', '', '')
  let g:ycm_python_binary_path = venv_path . '/bin/python'
else
  let g:ycm_python_binary_path = 'python'
endif

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

" DelimitMate - Insert new line
imap <c-l> <cr><esc>O

" Beautify JS
map <leader>rn :call JsBeautify()<cr>
au FileType javascript vnoremap <buffer> <leader>rn :call RangeJsBeautify()<cr>
au FileType json vnoremap <buffer> <leader>rn :call RangeJsonBeautify()<cr>
au FileType jsx vnoremap <buffer> <leader>rn :call RangeJsxBeautify()<cr>
au FileType html vnoremap <buffer> <leader>rn :call RangeHtmlBeautify()<cr>
au FileType css vnoremap <buffer> <leader>rn :call RangeCSSBeautify()<cr>

" Enable JSX code in .js files
let g:jsx_ext_required = 0

" Rust settings
let g:rustfmt_autosave = 1
let g:racer_cmd = "~/.cargo/bin/racer"
let g:racer_experimental_completer = 1

" Airline settings
" Enable the list of buffers
let g:airline#extensions#tabline#enabled = 1
" Show just the filename
let g:airline#extensions#tabline#fnamemod = ':t'

" Fugitive settings
nmap <silent> <leader>gs :Gstatus<cr>
nmap <leader>ge :Gedit<cr>
nmap <silent><leader>gr :Gread<cr>
nmap <silent><leader>gb :Gblame<cr>
nmap <silent><leader>gd :Gdiff<cr>

" Automatic formatting
au BufWritePre *.html :%s/\s\+$//e
au BufNewFile * set noeol
au BufRead,BufNewFile *.go set filetype=go
au BufRead,BufNewFile *.rs set filetype=rust

" Format file
nmap <leader>fef ggVG=

" Quit with :Q, without saving
command! -nargs=0 Quit :qa!
